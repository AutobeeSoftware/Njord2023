// Generated by gencpp from file ball_detection_pck/ball_location.msg
// DO NOT EDIT!


#ifndef BALL_DETECTION_PCK_MESSAGE_BALL_LOCATION_H
#define BALL_DETECTION_PCK_MESSAGE_BALL_LOCATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ball_detection_pck
{
template <class ContainerAllocator>
struct ball_location_
{
  typedef ball_location_<ContainerAllocator> Type;

  ball_location_()
    : yellow_location(0.0)
    , black_location(0.0)
    , red_location(0.0)
    , green_location(0.0)
    , middle(0.0)
    , isyellowfound(false)
    , isredfound(false)
    , isgreenfound(false)
    , isblackfound(false)  {
    }
  ball_location_(const ContainerAllocator& _alloc)
    : yellow_location(0.0)
    , black_location(0.0)
    , red_location(0.0)
    , green_location(0.0)
    , middle(0.0)
    , isyellowfound(false)
    , isredfound(false)
    , isgreenfound(false)
    , isblackfound(false)  {
  (void)_alloc;
    }



   typedef float _yellow_location_type;
  _yellow_location_type yellow_location;

   typedef float _black_location_type;
  _black_location_type black_location;

   typedef float _red_location_type;
  _red_location_type red_location;

   typedef float _green_location_type;
  _green_location_type green_location;

   typedef float _middle_type;
  _middle_type middle;

   typedef uint8_t _isyellowfound_type;
  _isyellowfound_type isyellowfound;

   typedef uint8_t _isredfound_type;
  _isredfound_type isredfound;

   typedef uint8_t _isgreenfound_type;
  _isgreenfound_type isgreenfound;

   typedef uint8_t _isblackfound_type;
  _isblackfound_type isblackfound;





  typedef boost::shared_ptr< ::ball_detection_pck::ball_location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ball_detection_pck::ball_location_<ContainerAllocator> const> ConstPtr;

}; // struct ball_location_

typedef ::ball_detection_pck::ball_location_<std::allocator<void> > ball_location;

typedef boost::shared_ptr< ::ball_detection_pck::ball_location > ball_locationPtr;
typedef boost::shared_ptr< ::ball_detection_pck::ball_location const> ball_locationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ball_detection_pck::ball_location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ball_detection_pck::ball_location_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ball_detection_pck::ball_location_<ContainerAllocator1> & lhs, const ::ball_detection_pck::ball_location_<ContainerAllocator2> & rhs)
{
  return lhs.yellow_location == rhs.yellow_location &&
    lhs.black_location == rhs.black_location &&
    lhs.red_location == rhs.red_location &&
    lhs.green_location == rhs.green_location &&
    lhs.middle == rhs.middle &&
    lhs.isyellowfound == rhs.isyellowfound &&
    lhs.isredfound == rhs.isredfound &&
    lhs.isgreenfound == rhs.isgreenfound &&
    lhs.isblackfound == rhs.isblackfound;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ball_detection_pck::ball_location_<ContainerAllocator1> & lhs, const ::ball_detection_pck::ball_location_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ball_detection_pck

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ball_detection_pck::ball_location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ball_detection_pck::ball_location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ball_detection_pck::ball_location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ball_detection_pck::ball_location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ball_detection_pck::ball_location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ball_detection_pck::ball_location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ball_detection_pck::ball_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54a985c57540e58f306ef1eae8181295";
  }

  static const char* value(const ::ball_detection_pck::ball_location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54a985c57540e58fULL;
  static const uint64_t static_value2 = 0x306ef1eae8181295ULL;
};

template<class ContainerAllocator>
struct DataType< ::ball_detection_pck::ball_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ball_detection_pck/ball_location";
  }

  static const char* value(const ::ball_detection_pck::ball_location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ball_detection_pck::ball_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 yellow_location\n"
"float32 black_location\n"
"float32 red_location\n"
"float32 green_location\n"
"float32 middle\n"
"bool isyellowfound\n"
"bool isredfound\n"
"bool isgreenfound\n"
"bool isblackfound\n"
"\n"
;
  }

  static const char* value(const ::ball_detection_pck::ball_location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ball_detection_pck::ball_location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yellow_location);
      stream.next(m.black_location);
      stream.next(m.red_location);
      stream.next(m.green_location);
      stream.next(m.middle);
      stream.next(m.isyellowfound);
      stream.next(m.isredfound);
      stream.next(m.isgreenfound);
      stream.next(m.isblackfound);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ball_location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ball_detection_pck::ball_location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ball_detection_pck::ball_location_<ContainerAllocator>& v)
  {
    s << indent << "yellow_location: ";
    Printer<float>::stream(s, indent + "  ", v.yellow_location);
    s << indent << "black_location: ";
    Printer<float>::stream(s, indent + "  ", v.black_location);
    s << indent << "red_location: ";
    Printer<float>::stream(s, indent + "  ", v.red_location);
    s << indent << "green_location: ";
    Printer<float>::stream(s, indent + "  ", v.green_location);
    s << indent << "middle: ";
    Printer<float>::stream(s, indent + "  ", v.middle);
    s << indent << "isyellowfound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isyellowfound);
    s << indent << "isredfound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isredfound);
    s << indent << "isgreenfound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isgreenfound);
    s << indent << "isblackfound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isblackfound);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BALL_DETECTION_PCK_MESSAGE_BALL_LOCATION_H
