# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ball_detection_pck/ball_location.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ball_location(genpy.Message):
  _md5sum = "54a985c57540e58f306ef1eae8181295"
  _type = "ball_detection_pck/ball_location"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 yellow_location
float32 black_location
float32 red_location
float32 green_location
float32 middle
bool isyellowfound
bool isredfound
bool isgreenfound
bool isblackfound

"""
  __slots__ = ['yellow_location','black_location','red_location','green_location','middle','isyellowfound','isredfound','isgreenfound','isblackfound']
  _slot_types = ['float32','float32','float32','float32','float32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       yellow_location,black_location,red_location,green_location,middle,isyellowfound,isredfound,isgreenfound,isblackfound

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ball_location, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.yellow_location is None:
        self.yellow_location = 0.
      if self.black_location is None:
        self.black_location = 0.
      if self.red_location is None:
        self.red_location = 0.
      if self.green_location is None:
        self.green_location = 0.
      if self.middle is None:
        self.middle = 0.
      if self.isyellowfound is None:
        self.isyellowfound = False
      if self.isredfound is None:
        self.isredfound = False
      if self.isgreenfound is None:
        self.isgreenfound = False
      if self.isblackfound is None:
        self.isblackfound = False
    else:
      self.yellow_location = 0.
      self.black_location = 0.
      self.red_location = 0.
      self.green_location = 0.
      self.middle = 0.
      self.isyellowfound = False
      self.isredfound = False
      self.isgreenfound = False
      self.isblackfound = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f4B().pack(_x.yellow_location, _x.black_location, _x.red_location, _x.green_location, _x.middle, _x.isyellowfound, _x.isredfound, _x.isgreenfound, _x.isblackfound))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.yellow_location, _x.black_location, _x.red_location, _x.green_location, _x.middle, _x.isyellowfound, _x.isredfound, _x.isgreenfound, _x.isblackfound,) = _get_struct_5f4B().unpack(str[start:end])
      self.isyellowfound = bool(self.isyellowfound)
      self.isredfound = bool(self.isredfound)
      self.isgreenfound = bool(self.isgreenfound)
      self.isblackfound = bool(self.isblackfound)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f4B().pack(_x.yellow_location, _x.black_location, _x.red_location, _x.green_location, _x.middle, _x.isyellowfound, _x.isredfound, _x.isgreenfound, _x.isblackfound))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.yellow_location, _x.black_location, _x.red_location, _x.green_location, _x.middle, _x.isyellowfound, _x.isredfound, _x.isgreenfound, _x.isblackfound,) = _get_struct_5f4B().unpack(str[start:end])
      self.isyellowfound = bool(self.isyellowfound)
      self.isredfound = bool(self.isredfound)
      self.isgreenfound = bool(self.isgreenfound)
      self.isblackfound = bool(self.isblackfound)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f4B = None
def _get_struct_5f4B():
    global _struct_5f4B
    if _struct_5f4B is None:
        _struct_5f4B = struct.Struct("<5f4B")
    return _struct_5f4B
